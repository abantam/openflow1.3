# the part selection and associated pin choices (if any) are intended as 
# an example for the family selected.  Please refer to the User Guide
# for more information about IO selection.
# part selected is kintex7 xc7k325tffg676
CONFIG PART =  xc7k325tffg900-1;

#
####
#######
##########
#############
#################
## System level constraints
########## GENERAL LOC CONSTRAINTS FOR THE KC705 BOARD ##########
Net clk_in_p         LOC = AD12  | IOSTANDARD = LVDS;
Net clk_in_n         LOC = AD11  | IOSTANDARD = LVDS;

# REV b board
#Net glbl_rst         LOC = AK4  | IOSTANDARD = LVCMOS15 | TIG;
# REV c or later
Net glbl_rst         LOC = AB7  | IOSTANDARD = LVCMOS15 | TIG;

#### Module LEDs_8Bit constraints
Net frame_error      LOC = AB8  | IOSTANDARD = LVCMOS15;
Net frame_errorn     LOC = AA8  | IOSTANDARD = LVCMOS15;
Net activity_flash   LOC = AC9  | IOSTANDARD = LVCMOS15;
Net activity_flashn  LOC = AB9  | IOSTANDARD = LVCMOS15;

#### Module Push_Buttons_4Bit constraints
Net update_speed     LOC = G12  | IOSTANDARD = LVCMOS25;
# REV b board
#Net config_board     LOC = AD7  | IOSTANDARD = LVCMOS15;
# REV c or later
Net config_board     LOC = AC6  | IOSTANDARD = LVCMOS15;
Net pause_req_s      LOC = AB12  | IOSTANDARD = LVCMOS15;
Net reset_error      LOC = AA12  | IOSTANDARD = LVCMOS15;

#### Module DIP_Switches_4Bit constraints
Net mac_speed<0>     LOC = Y28  | IOSTANDARD = LVCMOS25;
Net mac_speed<1>     LOC = AA28  | IOSTANDARD = LVCMOS25;
Net gen_tx_data      LOC = W29  | IOSTANDARD = LVCMOS25;
Net chk_tx_data      LOC = Y29  | IOSTANDARD = LVCMOS25;

Net phy_resetn       LOC = L20  | IOSTANDARD = LVCMOS25 | TIG;

# lock to unused header - ensure this is unused
Net serial_response  LOC = AJ24  | IOSTANDARD = LVCMOS25;
Net tx_statistics_s  LOC = AK25  | IOSTANDARD = LVCMOS25;
Net rx_statistics_s  LOC = AE25  | IOSTANDARD = LVCMOS25;

Net mdc              LOC = R23  | IOSTANDARD = LVCMOS25;
Net mdio             LOC = J21  | IOSTANDARD = LVCMOS25;

########## RGMII SPECIFIC LOC CONSTRAINTS FOR the KC705 BOARD ##########

Net rgmii_rxd<3>     LOC = U28  | IOSTANDARD = LVCMOS25;
Net rgmii_rxd<2>     LOC = T25  | IOSTANDARD = LVCMOS25;
Net rgmii_rxd<1>     LOC = U25  | IOSTANDARD = LVCMOS25;
Net rgmii_rxd<0>     LOC = U30  | IOSTANDARD = LVCMOS25;

Net rgmii_txd<3>     LOC = L28  | IOSTANDARD = LVCMOS25;
Net rgmii_txd<2>     LOC = M29  | IOSTANDARD = LVCMOS25;
Net rgmii_txd<1>     LOC = N25  | IOSTANDARD = LVCMOS25;
Net rgmii_txd<0>     LOC = N27  | IOSTANDARD = LVCMOS25;

Net rgmii_tx_ctl     LOC = M27  | IOSTANDARD = LVCMOS25;
Net rgmii_txc        LOC = K30  | IOSTANDARD = LVCMOS25;

Net rgmii_rx_ctl     LOC = R28  | IOSTANDARD = LVCMOS25;
Net rgmii_rxc        LOC = U27  | IOSTANDARD = LVCMOS25;



#
####
#######
##########
#############
#################
#EXAMPLE DESIGN CONSTRAINTS

############################################################
# Clock Period Constraints                                 #
############################################################


############################################################
# RX Clock period Constraints                              #
############################################################
# Receiver clock period constraints: please do not relax
NET "rgmii_rxc"                  TNM_NET  = "clk_rx";
TIMESPEC "TS_rx_clk"       = PERIOD "clk_rx" 8000 ps HIGH 50 %;

############################################################
# TX Clock period Constraints                              #
############################################################
# Transmitter clock period constraints: please do not relax
NET "clk_in_p" TNM_NET = "clk_in_p";
TIMESPEC "TS_clk_in_p" = PERIOD "clk_in_p" 5.000 ns HIGH 50% INPUT_JITTER 50.0ps;

#set to use clock backbone - this uses a long route to allow the MMCM to be placed in the other half of the device
NET "clk_in_p" CLOCK_DEDICATED_ROUTE = BACKBONE;

NET "gtx_clk_bufg" TNM_NET = "clk_gtx";
TIMESPEC "TS_gtx_clk"      = PERIOD "clk_gtx" 8000 ps HIGH 50 %;


############################################################
# AXI-Lite Clock period Constraints                        #
############################################################
# ignore timing from gtx_clk to the cpu clock
TIMESPEC "TS_glbl_rst" = FROM "clock_generator_clkout0" TO "clock_generator_clkout1" TIG;


#
####
#######
##########
#############
#################
#AXI4-STREAM FIFO CONSTRAINTS

############################################################
# FIFO Clock Crossing Constraints                          #
############################################################
## TX Client FIFO
# Group the clock crossing signals into timing groups
INST "*user_side_FIFO/tx_fifo_i/rd_tran_frame_tog"              TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO/tx_fifo_i/rd_addr_txfer*"                 TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO/tx_fifo_i/rd_txfer_tog"                   TNM = "tx_fifo_rd_to_wr";
#INST "*user_side_FIFO/tx_fifo_i/rd_retran_frame*"               TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO/tx_fifo_i*rd_col_window_pipe?1*"          TNM = "tx_fifo_rd_to_wr";

INST "*user_side_FIFO/tx_fifo_i/wr_frame_in_fifo"               TNM = "tx_fifo_wr_to_rd";

TIMESPEC "TS_tx_fifo_rd_to_wr"   = FROM "tx_fifo_rd_to_wr" TO "clk_gtx" 7800 ps DATAPATHONLY;
TIMESPEC "TS_tx_fifo_wr_to_rd"   = FROM "tx_fifo_wr_to_rd" TO clk_gtx 7800 ps DATAPATHONLY;

# Reduce clock period to allow for metastability settling time
INST "*user_side_FIFO/tx_fifo_i*wr_col_window_pipe?0*"          TNM = "tx_metastable";
TIMESPEC "ts_tx_meta_protect"    = FROM "tx_metastable" 5 ns;

# constrain the input to this register - this is a multicycle path due to the
# resync of the control
INST "*user_side_FIFO/tx_fifo_i/rd_addr_txfer*"                 TNM = "tx_addr_rd";
INST "*user_side_FIFO/tx_fifo_i/wr_rd_addr*"                    TNM = "tx_addr_wr";

TIMESPEC "TS_tx_fifo_addr"       = FROM "tx_addr_rd" TO "tx_addr_wr" 10ns;


## RX Client FIFO
# Group the clock crossing signals into timing groups
INST "*user_side_FIFO/rx_fifo_i/wr_store_frame_tog"             TNM = "rx_fifo_wr_to_rd";
INST "*user_side_FIFO/rx_fifo_i/rd_addr*"                       TNM = "rx_fifo_rd_to_wr";

TIMESPEC "TS_rx_fifo_wr_to_rd"   = FROM "rx_fifo_wr_to_rd" TO "clk_gtx" 7800 ps DATAPATHONLY;
TIMESPEC "TS_rx_fifo_rd_to_wr"   = FROM "rx_fifo_rd_to_wr" TO "clk_rx" 7800 ps DATAPATHONLY;




#
####
#######
##########
#############
#################
#BLOCK CONSTRAINTS


############################################################
# The following are required to maximise setup/hold        #
############################################################

INST "rgmii_txd*"                                               SLEW = FAST;
INST "rgmii_tx_ctl"                                             SLEW = FAST;
INST "rgmii_txc"                                                SLEW = FAST;



############################################################
# RGMII: IODELAY Constraints
############################################################
# Please modify the value of the IDELAY_VALUE/ODELAY_VALUE
# according to your design.
# For more information on IDELAYCTRL and IODELAY, please refer to
# refer to the Series-7 User Guide.
#
#INST "*trimac_block*rgmii_interface*delay_rgmii_tx_clk"          ODELAY_VALUE = 26;

# For this example UCF, the IODELAY component has been placed.
# This is to provide a similiar Clock Path and Data Path delay
# at the RGMII IDDRs.
INST "*trimac_block*rgmii_interface*delay_rgmii_rx_ctl"           IDELAY_VALUE = 16;
INST "*trimac_block*rgmii_interface*delay_rgmii_rxd"              IDELAY_VALUE = 16;

# Group IODELAY and IDELAYCTRL components to aid placement
INST "*trimac_block*rgmii_interface*delay_rgmii_rx_ctl"           IODELAY_GROUP = "grp1";
INST "*trimac_block*rgmii_interface*delay_rgmii_rxd"              IODELAY_GROUP = "grp1";
INST "*trimac_block*dlyctrl"                                      IODELAY_GROUP = "grp1";




############################################################
# For Setup and Hold time analysis on RGMII inputs         #
############################################################

# Identify RGMII Rx Pads only.  
# This prevents setup/hold analysis being performed on false inputs,
# eg, the configuration_vector inputs.
INST "rgmii_rxd*"   TNM = IN_RGMII; 
INST "rgmii_rx_ctl" TNM = IN_RGMII;

# The following constraints work in conjunction with IDELAY_VALUE settings to
# check that the RGMII receive bus remains in alignment with the rising and
# falling edges of RGMII_RXC, to within 1.1ns setup time and 1.1ns hold time.
# In addition to adjusting  IDELAY_VALUE settings for your system's timing
# characteristics, you may wish to refine these constraints to match the RGMII
# specification.
 
# due to the early nature of speed files for this family this constraint has been relaxed
 
TIMEGRP "IN_RGMII" OFFSET        = IN 1.5 ns VALID 3 ns BEFORE "rgmii_rxc" RISING; 
TIMEGRP "IN_RGMII" OFFSET        = IN 1.5 ns VALID 3 ns BEFORE "rgmii_rxc" FALLING;

 



#
####
#######
##########
#############
#################
#CORE CONSTRAINTS



############################################################
# Crossing of Clock Domain Constraints: please do not edit #
############################################################
# Flow Control logic reclocking - control sugnal is synchronised
INST "*trimac_core*FLOW*PAUSE_REQ_TO_TX*"                        TNM="flow_rx_to_tx";
INST "*trimac_core*FLOW*PAUSE_VALUE_TO_TX*"                      TNM="flow_rx_to_tx";
TIMESPEC "TS_flow_rx_to_tx"      = FROM "flow_rx_to_tx" TO clk_gtx 7800 ps DATAPATHONLY;

# generate a group of all flops NOT in the axi clock domain
TIMEGRP "ffs_except_axi"        = FFS EXCEPT "clock_generator_clkout1" "mdio_logic";
TIMESPEC "TS_config_to_all"      = FROM "clock_generator_clkout1" TO "ffs_except_axi" TIG;


# Ignore stats serialiser clock crossing as handled by toggle sync
INST "*x_stats_shift*"                                           TNM="sync_ok";
TIMESPEC "TS_rxstats_sync" = FROM "clk_rx" TO "sync_ok"          TIG;

# Ignore pause deserialiser as only present to prevent logic stripping
INST "pause_val*"                                                TNM="pause_dsr";
INST "pause_req*"                                                TNM="pause_dsr";
TIMESPEC "TS_pause_dsr" = FROM "pause_dsr"                       TIG;

# Statistics counters
# need to ignore standard sync logic
INST "*trimac_core*STATGEN*request_toggle*"                      TNM="stats_host_to_ref";
TIMESPEC "TS_stats_host_to_ref"  = FROM "stats_host_to_ref" TO "clk_gtx" 8000 ps DATAPATHONLY; 

# Also ignore paths from ref clock to axi and back
INST "*trimac_core*STATGEN*ipic_rd_clear*"                       TNM="stats_ref_to_host";
INST "*trimac_core*STATGEN*response_toggle*"                     TNM="stats_ref_to_host";
INST "*trimac_core*STATGEN*rd_data_ref*"                         TNM="stats_ref_to_host";
TIMESPEC "TS_stats_ref_to_host"  = FROM "stats_ref_to_host" TO "clock_generator_clkout1" 8000 ps DATAPATHONLY; 

INST "*trimac_core*STATGEN*ipic_rd_clear*"                       TNM="stats_addr";
INST "*trimac_core*STATGEN*rd_data_ref*"                         TNM="stats_addr";
TIMESPEC "TS_stats_addr"         = FROM "clock_generator_clkout1" TO "stats_addr" 8000 ps DATAPATHONLY; 




############################################################
# Ignore paths to resync flops
############################################################
INST "*/data_sync"                                                TNM = "resync_reg";
INST "*/reset_sync*"                                              TNM = "resync_reg";
TIMESPEC "ts_resync_flops"       = TO "resync_reg" TIG;

INST "*trimac_core*TXGEN*INT_CRS*"                                TNM = "col_async_reg";
INST "*trimac_core*TXGEN*REG_COL*"                                TNM = "col_async_reg";
INST "*trimac_core*GMII_MII_TX_GEN*COL_REG*"                      TNM = "col_async_reg";
TIMESPEC "ts_col_crs_in"         =  TO "col_async_reg" TIG;

# following two can be ignored as signal being captured is stable for multiple cycles
# in cases where it is used
INST "*trimac_core*TXGEN*REG_TX_EN_IN*"                           TNM = "tx_async_reg";
INST "*trimac_core*TXGEN*REG_TX_ER_IN*"                           TNM = "tx_async_reg";
TIMESPEC "ts_tx_async_regs"      = TO "tx_async_reg" TIG;

############################################################
# MDIO Constraints: please do not edit                     #
############################################################

# Place the MDIO logic in it's own timing groups
INST "*trimac_core*MANIFGEN*ENABLE_REG*"                          TNM = "mdio_logic";
INST "*trimac_core*MANIFGEN*READY_INT*"                           TNM = "mdio_logic";
INST "*trimac_core*MANIFGEN*STATE_COUNT*"                         TNM = FFS "mdio_logic";
INST "*trimac_core*MANIFGEN*MDIO_TRISTATE*"                       TNM = "mdio_logic";
INST "*trimac_core*MANIFGEN*MDIO_OUT*"                            TNM = "mdio_logic";

TIMESPEC "TS_mdio"              = PERIOD "mdio_logic" "TS_clock_generator_clkout1" * 40 PRIORITY 0;

